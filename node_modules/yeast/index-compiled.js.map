{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,kEAAkE,CAAC,KAAK,CAAC,EAAE,CAAC;IACvF,MAAM,GAAG,EAAE;IACX,GAAG,GAAG,EAAE;IACR,IAAI,GAAG,CAAC;IACR,CAAC,GAAG,CAAC;IACL,IAAI,CAAC;;;;;;;;;AAST,SAAS,MAAM,CAAC,GAAG,EAAE;AACnB,MAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,KAAG;AACD,WAAO,GAAG,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC;AAC3C,OAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC;GAChC,QAAQ,GAAG,GAAG,CAAC,EAAE;;AAElB,SAAO,OAAO,CAAC;CAChB;;;;;;;;;AASD,SAAS,MAAM,CAAC,GAAG,EAAE;AACnB,MAAI,OAAO,GAAG,CAAC,CAAC;;AAEhB,OAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/B,WAAO,GAAG,OAAO,GAAG,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;GACjD;;AAED,SAAO,OAAO,CAAC;CAChB;;;;;;;;AAQD,SAAS,KAAK,GAAG;AACf,MAAI,GAAG,GAAG,MAAM,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;;AAE9B,MAAI,GAAG,KAAK,IAAI,EAAE,OAAO,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,GAAG,CAAC;AAC9C,SAAO,GAAG,GAAE,GAAG,GAAE,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;CACjC;;;;;AAKD,OAAO,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;;;;;AAK7C,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AACtB,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AACtB,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')\n  , length = 64\n  , map = {}\n  , seed = 0\n  , i = 0\n  , prev;\n\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nfunction encode(num) {\n  var encoded = '';\n\n  do {\n    encoded = alphabet[num % length] + encoded;\n    num = Math.floor(num / length);\n  } while (num > 0);\n\n  return encoded;\n}\n\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nfunction decode(str) {\n  var decoded = 0;\n\n  for (i = 0; i < str.length; i++) {\n    decoded = decoded * length + map[str.charAt(i)];\n  }\n\n  return decoded;\n}\n\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nfunction yeast() {\n  var now = encode(+new Date());\n\n  if (now !== prev) return seed = 0, prev = now;\n  return now +'.'+ encode(seed++);\n}\n\n//\n// Map each character to its index.\n//\nfor (; i < length; i++) map[alphabet[i]] = i;\n\n//\n// Expose the `yeast`, `encode` and `decode` functions.\n//\nyeast.encode = encode;\nyeast.decode = decode;\nmodule.exports = yeast;\n"]}