{"version":3,"sources":["polling-xhr.js"],"names":[],"mappings":";;;;;;;AAKA,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AACnC,IAAI,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACxC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC;;;;;;AAMnD,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;;;;;;;;AAQrB,SAAS,GAAG,CAAC,GAAG,EAAC;AACf,SAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;CACzB;;;;;;AAMD,GAAG,CAAC,SAAS,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;;;;;;;;;AAS5C,GAAG,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,GAAG,EAAE;AACvC,MAAI,SAAS,IAAI,GAAG,CAAC,MAAM,EAAE;AAC3B,QAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;AAClB,QAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AAChC,WAAO,CAAC,8BAA8B,CAAC,GAAG,cAAc,CAAC;AACzD,OAAG,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC5B,OAAG,CAAC,GAAG,EAAE,CAAC;GACX,MAAM;AACL,WAAO,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GAC7C;CACF,CAAC;;;;;;;;;;AAUF,GAAG,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,GAAG,EAAE,OAAO,EAAC;AAC5C,SAAO,GAAG,OAAO,IAAI,EAAE,CAAC;;AAExB,MAAI,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE;AACtB,WAAO,CAAC,kCAAkC,CAAC,GAAG,MAAM,CAAC;AACrD,WAAO,CAAC,6BAA6B,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC;GAC7D,MAAM;AACL,WAAO,CAAC,6BAA6B,CAAC,GAAG,GAAG,CAAC;GAC9C;;AAED,SAAO,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;CAC3D,CAAC","file":"polling-xhr-compiled.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar Polling = require('./polling');\nvar Transport = require('../transport');\nvar debug = require('debug')('engine:polling-xhr');\n\n/**\n * Module exports.\n */\n\nmodule.exports = XHR;\n\n/**\n * Ajax polling transport.\n *\n * @api public\n */\n\nfunction XHR(req){\n  Polling.call(this, req);\n}\n\n/**\n * Inherits from Polling.\n */\n\nXHR.prototype.__proto__ = Polling.prototype;\n\n/**\n * Overrides `onRequest` to handle `OPTIONS`..\n *\n * @param {http.ServerRequest}\n * @api private\n */\n\nXHR.prototype.onRequest = function (req) {\n  if ('OPTIONS' == req.method) {\n    var res = req.res;\n    var headers = this.headers(req);\n    headers['Access-Control-Allow-Headers'] = 'Content-Type';\n    res.writeHead(200, headers);\n    res.end();\n  } else {\n    Polling.prototype.onRequest.call(this, req);\n  }\n};\n\n/**\n * Returns headers for a response.\n *\n * @param {http.ServerRequest} request\n * @param {Object} extra headers\n * @api private\n */\n\nXHR.prototype.headers = function(req, headers){\n  headers = headers || {};\n\n  if (req.headers.origin) {\n    headers['Access-Control-Allow-Credentials'] = 'true';\n    headers['Access-Control-Allow-Origin'] = req.headers.origin;\n  } else {\n    headers['Access-Control-Allow-Origin'] = '*';\n  }\n\n  return Polling.prototype.headers.call(this, req, headers);\n};\n"]}