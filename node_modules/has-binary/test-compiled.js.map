{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["\nvar hasBinary = require('./');\nvar assert = require('better-assert');\nvar fs = require('fs');\n\ndescribe('has-binarydata', function(){\n\n  it('should work with buffer', function(){\n    assert(hasBinary(fs.readFileSync('./test.js')));\n  });\n\n  it('should work with an array that does not contain binary', function() {\n    var arr = [1, 'cool', 2];\n    assert(!hasBinary(arr));\n  });\n\n  it('should work with an array that contains a buffer', function() {\n    var arr = [1, new Buffer('asdfasdf', 'utf8'), 2];\n    assert(hasBinary(arr));\n  });\n\n  it('should work with an object that does not contain binary', function() {\n    var ob = {a: 'a', b: [], c: 1234, toJSON: '{\\\"a\\\": \\\"a\\\"}'};\n    assert(!hasBinary(ob));\n  });\n\n  it('should work with an object that contains a buffer', function() {\n    var ob = {a: 'a', b: new Buffer('abc'), c: 1234, toJSON: '{\\\"a\\\": \\\"a\\\"}'};\n    assert(hasBinary(ob));\n  });\n\n  it('should work with null', function() {\n    assert(!hasBinary(null));\n  });\n\n  it('should work with undefined', function() {\n    assert(!hasBinary(undefined));\n  });\n\n  it('should work with a complex object that contains undefined and no binary', function() {\n    var ob = {\n      x: ['a', 'b', 123],\n      y: undefined,\n      z: {a: 'x', b: 'y', c: 3, d: null},\n      w: []\n    };\n    assert(!hasBinary(ob));\n  });\n\n  it('should work with a complex object that contains undefined and binary', function() {\n    var ob = {\n      x: ['a', 'b', 123],\n      y: undefined,\n      z: {a: 'x', b: 'y', c: 3, d: null},\n      w: [],\n      bin: new Buffer('xxx')\n    };\n    assert(hasBinary(ob));\n  });\n\n  if (global.ArrayBuffer) {\n      it('should work with an ArrayBuffer', function() {\n        assert(hasBinary(new ArrayBuffer()));\n      });\n  }\n\n  if (global.Blob) {\n     it('should work with a Blob', function() {\n        assert(hasBinary(new Blob()));\n     });\n  }\n\n});\n"]}