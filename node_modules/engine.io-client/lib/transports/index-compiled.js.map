{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAIA,IAAI,cAAc,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACnD,IAAI,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACnC,IAAI,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACvC,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;;;;;AAMvC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;AAC1B,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;;;;;;;;;AAS9B,SAAS,OAAO,CAAE,IAAI,EAAE;AACtB,MAAI,GAAG,CAAC;AACR,MAAI,EAAE,GAAG,KAAK,CAAC;AACf,MAAI,EAAE,GAAG,KAAK,CAAC;AACf,MAAI,KAAK,GAAG,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;;AAEjC,MAAI,MAAM,CAAC,QAAQ,EAAE;AACnB,QAAI,KAAK,GAAG,QAAQ,KAAK,QAAQ,CAAC,QAAQ,CAAC;AAC3C,QAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;;;AAGzB,QAAI,CAAC,IAAI,EAAE;AACT,UAAI,GAAG,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC;KACzB;;AAED,MAAE,GAAG,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,QAAQ,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;AAC/D,MAAE,GAAG,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC;GAC5B;;AAED,MAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,MAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,KAAG,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAC;;AAE/B,MAAI,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACrC,WAAO,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;GACtB,MAAM;AACL,QAAI,CAAC,KAAK,EAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAC9C,WAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;GACxB;CACF","file":"index-compiled.js","sourcesContent":["/**\n * Module dependencies\n */\n\nvar XMLHttpRequest = require('xmlhttprequest-ssl');\nvar XHR = require('./polling-xhr');\nvar JSONP = require('./polling-jsonp');\nvar websocket = require('./websocket');\n\n/**\n * Export transports.\n */\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling (opts) {\n  var xhr;\n  var xd = false;\n  var xs = false;\n  var jsonp = false !== opts.jsonp;\n\n  if (global.location) {\n    var isSSL = 'https:' === location.protocol;\n    var port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if ('open' in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error('JSONP disabled');\n    return new JSONP(opts);\n  }\n}\n"]}